# -*- coding: utf-8 -*-
"""BPE(Byte Pair Encoding).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BkzcNQVtUdfxbhD2-v8tbt5e8yj4JJQM
"""

import re, collections

# 쌍(pair) 빈도 계산
def get_freq(dictionary):
  pairs = collections.defaultdict(int)
  for word, freq in dictionary.items(): # 키(word 변수)-값(freq 변수) 쌍(pair) 반환
    symbols = word.split()
    for i in range(len(symbols)-1):
      pairs[symbols[i], symbols[i+1]] += freq
  
  print('현재 pair들의 빈도수: ', dict(pairs))
  return pairs

# 어휘 사전 업데이트
def merge_dictionary(target_pair, input_dict):
  output_dict = {}
  bigram = re.escape(' '.join(target_pair))
  p = re.compile(r'(?<!\S)' + bigram + r'(?!\S)') # 공백 아닌 문자열의 앞에 오는 경우, 뒤에 오는 경우
  for word in input_dict:
    w_out = p.sub(''.join(target_pair), word)
    output_dict[w_out] = input_dict[word]
  return output_dict

dictionary = {'l o w' : 5, 'l o w e r' : 2, 'n e w e s t' : 6, 'w i d e s t' : 3}
vocab = ["l", "o", "w", "e", "r", "n", "s", "t", "i", "d"]

num_merges = 10
for i in range(num_merges):
  print(f"{i+1}번째 BPE")
  pairs = get_freq(dictionary)
  best = max(pairs, key=pairs.get)
  dictionary = merge_dictionary(best, dictionary)
  vocab.append("".join(best))

  print(f"new merge: {best}")
  print(f"dictionary: {dictionary}")
  print(f"vocabulary: {vocab}")

